Task 2. Create a Kubernetes service cluster

  Create a cluster (in the us-east1-b zone) to host the service.
    Setting the zone
       >>gcloud config set compute/zone us-east1-b
    Creatig the Cluster
       >>gcloud container clusters create [CLUSTER-NAME]
    Getting authentication credentials to interact with the cluster
        >>gcloud container clusters get-credentials [CLUSTER-NAME]
  
  Use the Docker container hello-app (gcr.io/google-samples/hello-app:2.0 and deploy on the cluster
        >>kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:2.0
  
  create service to expose port
        >>kubectl expose deployment hello-server --type=LoadBalancer --port 8080
        
  inspect service
        >>kubectl get service
        
        
        
  Task 3: You will serve the site via nginx web servers, but you want to ensure that the environment is fault-tolerant. 
  Create an HTTP load balancer with a managed instance group of 2 nginx web servers. Use the following code to configure the web servers;
  You need to:

Create an instance template
Create a target pool
Create a managed instance group
Create a firewall rule to allow traffic (80/tcp)
Create a health check
Create a backend service and attach the manged instance group
Create a URL map and target HTTP proxy to route requests to your URL map
Create a forwarding rule
  
1: create a startup script file by running below script
        cat << EOF > startup.sh
      #! /bin/bash
      apt-get update
      apt-get install -y nginx
      service nginx start
      sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
      EOF
      
2: we create a load balancer template with using the script file created in step 1 above

      gcloud compute instance-templates create lb-ntemplate \--metadata-from-file startup-script=startup.sh

Create a target pool
    gcloud compute target-pools create lb-nginx-pool
   
3: Create a managed instance group
gcloud compute instance-groups managed create lb-instance-group \
--base-instance-name nginx \
--size 2 \
--template lb-ntemplate \
--target-pool lb-nginx-pool
      
4: Create a firewall rule to allow traffic (80/tcp)
      gcloud compute firewall-rules create allow-tcp-rule-771 \--allow tcp:80
    
 5: Create a health check
    gcloud compute health-checks create http http-basic-check 
    
 6: Create a backend service and attach the manged instance group
        
    gcloud compute backend-services create nginx-backend-service \
    --protocol=HTTP \
    --port-name=http \
    --health-checks=http-basic-check \
    --global
    
    Add your instance group as the backend to the backend service:
    
gcloud compute backend-services add-backend nginx-backend-service \
--instance-group lb-instance-group \
--instance-group-zone us-east1-b \
--global
 7: Create a URL map and target HTTP proxy to route requests to your URL map
      
            
gcloud compute url-maps create web-server-map \
--default-service nginx-backend-service

>>Create a target HTTP proxy to route requests to your URL map:

gcloud compute target-http-proxies create http-lb-proxy \
--url-map web-server-map


 8: Create a forwarding rule
 
 gcloud compute forwarding-rules create http-content-rule \
 --global \
 --target-http-proxy http-lb-proxy \
 --ports 80



  
  
